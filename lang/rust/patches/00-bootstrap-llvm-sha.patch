--- a/src/bootstrap/bootstrap.py
+++ b/src/bootstrap/bootstrap.py
@@ -465,18 +465,21 @@ class RustBuild(object):
             #
             # This works even in a repository that has not yet initialized
             # submodules.
-            top_level = subprocess.check_output([
-                "git", "rev-parse", "--show-toplevel",
-            ]).decode(sys.getdefaultencoding()).strip()
-            llvm_sha = subprocess.check_output([
-                "git", "rev-list", "--author=bors@rust-lang.org", "-n1",
-                "--first-parent", "HEAD",
-                "--",
-                "{}/src/llvm-project".format(top_level),
-                "{}/src/bootstrap/download-ci-llvm-stamp".format(top_level),
-                # the LLVM shared object file is named `LLVM-12-rust-{version}-nightly`
-                "{}/src/version".format(top_level)
-            ]).decode(sys.getdefaultencoding()).strip()
+            if 'LLVM_GIT_SHA' in os.environ:
+                llvm_sha = os.environ['LLVM_GIT_SHA']
+            else:
+                top_level = subprocess.check_output([
+                    "git", "rev-parse", "--show-toplevel",
+                ]).decode(sys.getdefaultencoding()).strip()
+                llvm_sha = subprocess.check_output([
+                    "git", "rev-list", "--author=bors@rust-lang.org", "-n1",
+                    "--first-parent", "HEAD",
+                    "--",
+                    "{}/src/llvm-project".format(top_level),
+                    "{}/src/bootstrap/download-ci-llvm-stamp".format(top_level),
+                    # the LLVM shared object file is named `LLVM-12-rust-{version}-nightly`
+                    "{}/src/version".format(top_level)
+                ]).decode(sys.getdefaultencoding()).strip()
             llvm_assertions = self.get_toml('assertions', 'llvm') == 'true'
             llvm_root = self.llvm_root()
             llvm_lib = os.path.join(llvm_root, "lib")

